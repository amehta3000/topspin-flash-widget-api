/** * ----------------------------------------------------------------- * Copyright (c) 2008 Topspin Media, Inc. All Right Reserved. * This software is the proprietary information of Topspin Media, Inc. * Use is subject to strict licensing terms. * ----------------------------------------------------------------- *  * A simple class which by composition manages all listeners, events & disposal * of a URLLoader. * * @copyright	Topspin Media * @author		tkarnezos@topspinmedia.com */  package com.topspin.api.net {	import flash.net.*;	import flash.events.*;		public class CleanlyLoader {			private var successHandler : Function;		private var loader : URLLoader;		private var statusReporter : Function;		private var req : URLRequest;		private var errorStr : String;				public function CleanlyLoader(req : URLRequest, successHandler : Function = null, statusReporter : Function = null, errorStr : String = "Sorry, we are having communication issues.") {			this.req = req;			this.errorStr = errorStr;			this.successHandler = successHandler;			if (successHandler == null) {				this.successHandler = function():void { return; };			}			this.statusReporter = statusReporter;			if (statusReporter == null) {				this.statusReporter = trace;			}						loader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.TEXT;			loader.addEventListener(flash.events.Event.COMPLETE, this.onSuccessWrapper);			loader.addEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.httpStatusHandler);			loader.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.ioErrorHandler);		}			public function go () : void {			try {				loader.load(req);			} catch (error : Error) {				trace("CleanlyLoader general error: " + error);				statusReporter(errorStr);				dispose();			}		}			private function onSuccessWrapper (event : flash.events.Event) : void {			this.successHandler(event);			dispose();		}			private function ioErrorHandler (event : flash.events.IOErrorEvent) : void {			statusReporter(errorStr);			dispose();		}			private function httpStatusHandler (event : flash.events.HTTPStatusEvent) : void {}			private function dispose () : void {			//trace("CleanlyLoader disposing of handlers for call to " + req.url);			loader.removeEventListener(flash.events.Event.COMPLETE, this.onSuccessWrapper);			loader.removeEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.httpStatusHandler);			loader.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.ioErrorHandler);		}	}}