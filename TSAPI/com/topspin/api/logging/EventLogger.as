package com.topspin.api.logging{	import flash.display.DisplayObject;	import flash.display.LoaderInfo;	import flash.external.ExternalInterface;		public class EventLogger	{		private static const VERSION : String = "LUNA";		private static var _instance : EventLogger;		private static var LOGGERS : Array = [PixelLogger];//, GALogger];				//Indicates whether tracking is enabled		private var _debugMode : Boolean = false;		private var _enabled : Boolean = true;  				private var _loggers : Array = [];				private var _eventSource : Number;		private var _info : Object;		private var _campaign : String;		private var _gaTrackingId : String;		private var _logUrl : String;		private var _appRoot : DisplayObject;		private var _ref_url : String;		private var _artist : String;		private var _fuid : String;  //user cookie				//Shared Object for fuid and other data		public static const TS_SHARED_OBJECT : String = "ts_widget_so";				public function EventLogger( enforcer : SingletonEnforcer ){}				public static function getInstance() : EventLogger		{			if (EventLogger._instance == null) {				EventLogger._instance = new EventLogger( new SingletonEnforcer() );			}			return EventLogger._instance;		}				public static function setEnv(app : Number, info : LoaderInfo = null, campaign : String = null, 										logUrl : String = null, 										appRoot : DisplayObject = null,										gaTrackingId : String = null, debugMode : Boolean = false) : void		{			var instance : EventLogger = getInstance();			instance._eventSource = app;			instance._info = info;			instance._logUrl = logUrl;		    instance._campaign = campaign;		    instance._appRoot = appRoot;		    instance._gaTrackingId = gaTrackingId;		    instance._debugMode = debugMode;			for each (var loggerClass : Class in LOGGERS) {				var logger : ILogger = new loggerClass();				if ( logger.applicable(app) ) {					logger.setEnv(info,logUrl,instance._appRoot,instance._gaTrackingId, instance._debugMode);					instance._loggers.push(logger);				} else {					logger = null;				}			}		}		public static function setCampaign( campaignId : String = null ) : void		{			var instance : EventLogger = getInstance();			instance._campaign = campaignId;		}		public static function setArtist( artistId : String = null ) : void		{			var instance : EventLogger = getInstance();			instance._artist = artistId;		}		public static function setGATrackingId( gaTrackingId : String = null) : void		{			var instance : EventLogger = EventLogger.getInstance();			if (gaTrackingId != null && gaTrackingId != "null")			{				instance._gaTrackingId = gaTrackingId;//				for each (var logger : ILogger in instance._loggers) {//					if (logger is GALogger)//					{//						GALogger(logger).setGATrackingId(instance._gaTrackingId);//						break;//					}//				}						}					}		public static function getCID(campaignId : String) : String		{			var cid : String = campaignId;		 	if (campaignId != null && campaignId != "null")		 	{		 		var cidStr = "/campaign/";		 		if (campaignId.indexOf(cidStr) != -1)		 		{		 			cid = campaignId.substring(campaignId.indexOf(cidStr) + cidStr.length);		 		}		 	}			trace("cid: " + cid);					return cid;		}		private static function getProductId(account_product_id : String) : String		{			var pid : String = account_product_id;		 	if (account_product_id != null && account_product_id != "null")		 	{		 		var pidStr = "/account_product/";		 		if (account_product_id.indexOf(pidStr) != -1)		 		{		 			pid = account_product_id.substring(account_product_id.indexOf(pidStr) + pidStr.length);		 		}		 	}			trace("pid: " + pid);					return pid;		}				private static function testEI () : Boolean {		    var eiAvail : Boolean = true;			if (ExternalInterface.available)			{				try {					ExternalInterface.call ("dummyJS",null); 											}				catch (e : Error)  {					eiAvail = false;				} 				catch (e:SecurityError) {						eiAvail = false;                    	      		} 						}			else {				eiAvail = false;			}							trace("External Interface Allowed : " + eiAvail);			return eiAvail;		}				public static function fire( eventType : Number, callParams : Object = null) : void		{			var instance : EventLogger = getInstance();			if (!instance.enabled)			{				trace("EventLogging is disabled");				return;			}			if (!instance._eventSource)			{				throw new Error("No event source provided to EventLogger!");			}						var parameters : Object = (callParams) ? callParams : new Object();//			parameters["fuid"]  =  instance._fuid;			parameters["event_source"] = instance._eventSource;			parameters["event_type"] = eventType;			var url : String = getPageURL();			if (url != null) {				parameters["referring_url"] = url;			}			if (instance._campaign != null)			{				parameters["campaign"] = instance._campaign;			}			if (instance._artist != null)			{				parameters["artist"] = instance._artist;			}									parameters["cid"] = getCID(parameters["campaign"]);						if (parameters["track"] && parameters["track"] != null) 			{				parameters["track"] = getProductId(parameters["track"]); 			}						//Set the referring information//			instance.setRefSO(parameters);						for each (var logger : ILogger in instance._loggers) {				logger.send(parameters);			}		}					private function getEnv( campaignId : String ) : String		{			var env : String = "production";			return env;			}		/**		 * Returns the referring URL of where the logger		 * is initialized 		 * @return 		 * 		 */		public static function getPageURL() : String {			var instance : EventLogger = getInstance();		    var url : String = instance._ref_url;		    if (testEI()) {				url = ExternalInterface.call("window.location.href.toString");							}			return url;		}				/**		 * Set a default referring_url in cases where JS is not		 * available. 		 * @param referring_url		 * 		 */				public static function setPageURL( referring_url : String ) : void {			var instance : EventLogger = getInstance();			instance._ref_url = referring_url;		}		/**		 * Getter setter to enable the EventLogger instance 		 * @param bool		 * 		 */				public function set enabled( bool : Boolean) : void		{			trace("LOGGER IS ENABLED: " + bool);			_enabled = bool;		}		public function get enabled() : Boolean		{			return _enabled;		}	}}internal class SingletonEnforcer {}	