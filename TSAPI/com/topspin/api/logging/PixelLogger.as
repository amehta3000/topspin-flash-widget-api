package com.topspin.api.logging {	import com.topspin.api.config.EnvironmentDetector;	import com.topspin.api.net.CleanlyLoader;		import flash.display.DisplayObject;	import flash.display.LoaderInfo;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;		public class PixelLogger implements ILogger {				static private const SUPPORTED_APPLICATIONS : Array = [];		static private const BLACKLIST : Array = [] ;		static private const ARTISTLINK_APPS : Array = [TSApplications.CUSTOM_ID, TSApplications.E4M];		private static var ENV_PRODUCTION : String = "production";		private static var ENV_QA1 : String = "qa1";		private static var ENV_QA2 : String = "qa2";		private static var ENV_QA3 : String = "qa3";		private static var ENV_PREPROD : String = "pp";		private static var ENV_LOCAL : String = "dev";			private var callURL : String = "http://px.topspin.net/px";  //default to production		private var env_param : String = "dev"; 		private var ldrInfo : LoaderInfo;		private var all_params : Object;		private var _debugMode : Boolean;				//Hash table to map event for logger.		private var lookup : Object = 		{			event_source : "es",			event_type : "et",			sub_type : "st", 			//sub_type ;  autoplay=1, play=0			st : "st",			cid : "c",			referring_url : "u",			env : "env",			track : "m",  				//track			fan_id : "f",			invoice_id : "i"			//not sure if i should use this yet.		};				private var PX_URL_HASH : Array =		[			["app.topspin.net", "px.topspin.net", "app"],			["qa.cdn.topspin.net", "px-qa1.topspin.net","qa1"],			["qa1.topspin.net", "px-qa1.topspin.net", "qa1"],			["qa2.topspin.net", "px-qa2.topspin.net", "qa2"],			["qa3.topspin.net", "px-qa3.topspin.net", "qa3"],			["qa3.cdn.topspin.net", "px-qa3.topspin.net","qa3"],			["pp.cdn.topspin.net", "px-pp.topspin.net", "pp"],			["preprod.topspin.net", "px-pp.topspin.net", "pp"],			["cdn.topspin.net", "px.topspin.net", "app"]		];								public function PixeLogger () : void {}				public function applicable ( app : Number ) : Boolean {			return SUPPORTED_APPLICATIONS.length == 0 || SUPPORTED_APPLICATIONS.indexOf(app) != -1;		}		public function isArtistlink( app : Number ) : Boolean {			return ARTISTLINK_APPS.indexOf(app) != -1;		} 				public function setEnv( env : LoaderInfo = null, logUrl : String = null, appRoot : DisplayObject = null, gaTrackerId : String = null, debugMode : Boolean = false) : void {			if (!logUrl) {				var baseurl : String = EnvironmentDetector.parseBaseURL(env);				var regEx : RegExp = new RegExp(/(https?:\/\/[\w|-]+\.local)/);				var matches = regEx.exec(baseurl);				trace("PX: matched: " + matches);				if (matches != null) {					baseurl = matches[0] + ":2400";				}								var key : String;				var val : String;								for (var i:int=0;i<PX_URL_HASH.length;i++)				{					key = PX_URL_HASH[i][0];					val = PX_URL_HASH[i][1];					if (baseurl.indexOf(key) != -1) {						baseurl = baseurl.replace(key,val);						env_param =  PX_URL_HASH[i][2];						break;					}				}								if (baseurl.indexOf("https:") != -1)				{					baseurl = baseurl.replace(/https:/, "http:");					trace("replace it baseurl : " + baseurl);				}								callURL = baseurl + (baseurl.charAt(baseurl.length-1) != '/' ? "/" : "") + 'ev';			}else{				callURL = logUrl;			}							ldrInfo = env;			_debugMode = debugMode;			//			trace("CALLURL: " + callURL);		}				public function send ( parameters : Object ) : void {						if (BLACKLIST.indexOf(parameters["event_type"]) != -1) {				return;			}			all_params = new Object();			var req : URLRequest = new URLRequest();			var urlvars : URLVariables = new URLVariables();			req.method = URLRequestMethod.GET;			req.url = callURL;						var isAL : Boolean = isArtistlink(parameters["event_source"]);						trace("px [ " + callURL);			//env of the logger			parameters["env"] = env_param;			for (var key in parameters) {				if (lookup[key] != undefined && parameters[key] != undefined && parameters[key] != null )				{					trace("\t" + lookup[key] + "=[" + parameters[key] + "]");					urlvars[lookup[key]] = parameters[key];					all_params[key] = parameters[key];				}			}					trace("]");			req.data = urlvars;						var loader : CleanlyLoader = new CleanlyLoader(req);			loader.go();		}			/**		 * Util method to generate random 8 character digit for use as a CHILD id 		 * @return String 		 * 		 */				private static function randid() : String		{		    var key:String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";		    var idStr:String = key.substr(int(Math.random()*26),1);		    for (var i = 0; i < 7; ++i)		        idStr += key.substr(int(Math.random()*36),1);		    return idStr;		}		}}